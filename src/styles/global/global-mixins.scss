// / @author Chris Eppstein
// / @param {Number} $value - Value to convert
// / @param {String} $unit - Unit to convert to
// / @return {Number} Converted angle
@function convert-angle($value, $unit) {
  $convertable-units: deg grad turn rad;
  $conversion-factors: 1 (10grad/9deg) (1turn/360deg) (3.1415926rad/180deg);
  @if index($convertable-units, unit($value)) and index($convertable-units, $unit) {
    @return $value
             / nth($conversion-factors, index($convertable-units, unit($value)))
             * nth($conversion-factors, index($convertable-units, $unit));
  }
  
  @warn "Cannot convert `#{unit($value)}` to `#{$unit}`.";
}

// / Test if `$value` is an angle
// / @param {*} $value - Value to test
// / @return {Bool}
@function is-direction($value) {
  $is-direction: index((to top, to top right, to right top, to right, to bottom right, to right bottom, to bottom, to bottom left, to left bottom, to left, to left top, to top left), $value);
  $is-angle: type-of($value) == 'number' and index('deg' 'grad' 'turn' 'rad', unit($value));
  
  @return $is-direction or $is-angle;
}

/// Convert a direction to legacy syntax
// / @param {Keyword | Angle} $value - Value to convert
// / @require {function} is-direction
// / @require {function} convert-angle
@function legacy-direction($value) {
  @if is-direction($value) == false {
    @warn "Cannot convert `#{$value}` to legacy syntax because it doesn't seem to be an angle or a direction";
  }
  
  $conversion-map: ( 
    to top          : bottom,
    to top right    : bottom left,
    to right top    : left bottom,
    to right        : left,
    to bottom right : top left,
    to right bottom : left top,
    to bottom       : top,
    to bottom left  : top right,
    to left bottom  : right top,
    to left         : right,
    to left top     : right bottom,
    to top left     : bottom right
  );
    
  @if map-has-key($conversion-map, $value) {
    @return map-get($conversion-map, $value);
  }
  
  @return 90deg - convert-angle($value, 'deg');
}

/// Mixin printing a linear-gradient 
/// as well as a plain color fallback 
/// and the `-webkit-` prefixed declaration
// / @access public
// / @param {String | List | Angle} $direction - Linear gradient direction
// / @param {Arglist} $color-stops - List of color-stops composing the gradient
@mixin linear-gradient($direction, $color-stops...) {
  @if is-direction($direction) == false {
    $color-stops: ($direction, $color-stops);
    $direction: 180deg;
  }
  
  background: nth(nth($color-stops, 1), 1);
  background: -webkit-linear-gradient(legacy-direction($direction), $color-stops);
  background: linear-gradient($direction, $color-stops);
}

// Tests
// .test-1 {
//   @include linear-gradient(#31B7D7, #EDAC7D);
// }

// .test-2 {
//   @include linear-gradient(to right, #E47D7D 0%, #C195D3 50%, #4FB4E8 100%);
// }

// .test-3 {
//   @include linear-gradient(42deg, #B58234 0%, #D2B545 50%, #D7C04D 50.01%, #FFFFFF 100%);
// }


@mixin app-color($color-main) {
  color: $color-main
}

@mixin gradient--chi() {
  @include linear-gradient(-45deg, #875e96, #a76ebe);
}
@mixin gradient--giv() {
  @include linear-gradient(-45deg, #f0af23, #f5c426);
}
@mixin gradient--gro() {
  @include linear-gradient(-45deg, #fc7638, #ff9332);
}
@mixin gradient--mus() {
  @include linear-gradient(-45deg, #3f75e5, #32a0f0);
}
@mixin gradient--peo() {
  @include linear-gradient(-45deg, #3f75e5, #32a0f0);
}
@mixin gradient--reg() {
  @include linear-gradient(-45deg, #46948d, #43b39c);
}
@mixin gradient--res() {
  @include linear-gradient(-45deg, #cd4e39, #f25437);
}
@mixin gradient--ser() {
  @include linear-gradient(-45deg, #64952F, #6BB13D);
}


//Media queries
// USE IT LIKE
  // @include bp(mobile) {
  //   width: 100%;
  // }

@mixin bp($point) {
  @if $point == to-mobile {
    //until 768px
    @media (max-width: 768px) { @content; }
  }
  @if $point == from-mobile {
    //until 769px
    @media (min-width: 769px) { @content; }
  }  
  @else if $point == to-tablet {
    //until 1023px    
    @media (max-width: 1023px) { @content; }
  }
  @else if $point == from-tablet {
    //from 1024px    
    @media (min-width: 1024px) { @content; }
  }
  @else if $point == tablet-only {
    //from 769px and until 1023px    
    @media (min-width: 769px) and (max-width: 1023px)  { @content; }
  }
  @else if $point == touch {
    //until 1023px
    @media (max-width: 1023px) { @content; }
  }
  @else if $point == to-desktop {
    //until 1023px
    @media (max-width: 1023px) { @content; }
  }
  @else if $point == from-desktop {
    //from 1024px
    @media (min-width: 1024px) { @content; }
  }
  @else if $point == desktop-only {
    //from 1024px and until 1215px
    @media (min-width: 1024px) and (max-width: 1215px) { @content; }
  }
  @else if $point == from-widescreen {
    //from 1216px
    @media (min-width: 1216px) { @content; }
  }
  @else if $point == widescreen-only {
    //from 1216px and until 1407px
    @media (min-width: 1216px) and (max-width: 1407px) { @content; }
  }
  @else if $point == from-fullhd {
    //from 1408px
    @media (min-width: 1408px) { @content; }
  }
}